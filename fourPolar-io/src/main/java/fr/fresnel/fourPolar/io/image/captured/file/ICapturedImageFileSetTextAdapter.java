package fr.fresnel.fourPolar.io.image.captured.file;

import java.util.Iterator;

import fr.fresnel.fourPolar.core.image.captured.checker.ICapturedImageChecker;
import fr.fresnel.fourPolar.core.image.captured.file.ICapturedImageFile;
import fr.fresnel.fourPolar.core.image.captured.file.ICapturedImageFileSet;
import fr.fresnel.fourPolar.core.imagingSetup.IFourPolarImagingSetup;
import fr.fresnel.fourPolar.core.imagingSetup.imageFormation.Cameras;
import fr.fresnel.fourPolar.io.exceptions.image.captured.file.CorruptCapturedImageSet;

/**
 * Provides an string representation of an {@link ICapturedImageFileSet} that
 * can be used to write this set to disk.
 * 
 * The convention used is that each group of {@link ICapturedImageFile} that
 * correspond to the four polarizations are converted into the following
 * strings:
 * <ul>
 * <ul>
 * {@link Cameras#One} case:
 * <li>String 0 : "Channels : [c1, c2, ...]", that indicates the channels the
 * files correspond to.</li>
 * <li>String 1 : "Pol0_45_90_135 : file.xxx", the file that corresponds to
 * pol0, 45, 90 and 135.</li>
 * </ul>
 * 
 * <ul>
 * {@link Cameras#Two} case:
 * <li>String 0 : "Channels : [c1, c2, ...]", that indicates the channels the
 * files correspond to.</li>
 * <li>String 1 : "Pol0_90 : file.xxx", the file that corresponds to pol0 and
 * 90.</li>
 * <li>String 2 : "Pol45_135 : file.xxx", the file that corresponds to pol45 and
 * 135.</li>
 * </ul>
 * 
 * <ul>
 * {@link Cameras#Four} case:
 * <li>String 0 : "Channels : [c1, c2, ...]", that indicates the channels the
 * files correspond to.</li>
 * <li>String 1 : "Pol0 : file.xxx", the file that corresponds to pol0.</li>
 * <li>String 2 : "Pol45 : file.xxx", the file that corresponds to pol45.</li>
 * <li>String 3 : "Pol90 : file.xxx", the file that corresponds to pol90.</li>
 * <li>String 4 : "Pol135 : file.xxx", the file that corresponds to pol135.</li>
 * </ul>
 * </ul>
 * 
 * Note that for {@link Cameras#One}, all pol filess would be equal, and for
 * {@link Cameras#Two}, pol0 is equal to pol90 and pol45 is equal to pol135.
 */
public class ICapturedImageFileSetTextAdapter {
    /**
     * The checker used when recreating the file set from strings.
     */
    private final ICapturedImageChecker _checker;

    private final ICapturedImageFileSetToTextAdapter _toTextAdapter;
    private final ICapturedImageFileSetFromTextAdapter _fromTextAdapter;

    /**
     * With this constructor, the captured image checker is set to
     * {@link CapturedImageExistsChecker}. This would only check for existence of
     * images
     * 
     * @param setup is the four polar imaging setup.
     */
    public ICapturedImageFileSetTextAdapter(IFourPolarImagingSetup setup) {
        _checker = new CapturedImageExistsChecker();
        _toTextAdapter = new ICapturedImageFileSetToTextAdapter(setup.getCameras());
        _fromTextAdapter = _chooseFromTextAdapter(setup);
    }

    /**
     * With this constructor, we can supply a {@link CapturedImageExistsChecker},
     * that is used for checking the captured image when forming a
     * {@link ICapturedImageSet}.
     * 
     * 
     * @param setup is the four polar imaging setup.
     */
    public ICapturedImageFileSetTextAdapter(IFourPolarImagingSetup setup, ICapturedImageChecker checker) {
        _checker = checker;
        _toTextAdapter = new ICapturedImageFileSetToTextAdapter(setup.getCameras());
        _fromTextAdapter = _chooseFromTextAdapter(setup);
    }

    private ICapturedImageFileSetFromTextAdapter _chooseFromTextAdapter(IFourPolarImagingSetup setup) {
        switch (setup.getCameras()) {
            case One:
                return new ICapturedImageFileSetOneCameraFromTextAdapter(setup, _checker);

            case Two:
                return new ICapturedImageFileSetTwoCameraFromTextAdapter(setup, _checker);

            default:
                return new ICapturedImageFileSetFourCameraFromTextAdapter(setup, _checker);
        }
    }

    /**
     * @return an iterator for string representation of each group of files that
     *         correspond to the four polarizations. Each iteration returns one
     *         group of such files.
     */
    public Iterator<String[]> toString(ICapturedImageFileSet capturedImageFileSet) {
        return _toTextAdapter.toString(capturedImageFileSet);
    }

    /**
     * Transforms the string representation generated by the {@link #toString()}
     * method back to a captured file set.
     * 
     * @throws CorruptCapturedImageSet in case the image set information can't be
     *                                 retrieved from the string iterator.
     */
    public ICapturedImageFileSet fromString(Iterator<String[]> setIterator, String setName)
            throws CorruptCapturedImageSet {
        return _fromTextAdapter.fromString(setIterator, setName);
    }

}